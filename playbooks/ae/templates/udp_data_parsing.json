{
  "description": "Transparent Security UDP v4 & v6 data parsing pipeline",
  "processors": [
    {
        "set" : {
          "field" : "ts.rawData",
          "value" : "{{layers.data.data_data_data}}"
        }
    },
    {
      "script": {
         "lang": "painless",
         "ignore_failure": true,
          "source": "ctx.ts.telemetryReport =ctx.ts.rawData.substring(0, 48).replace(':','')"
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String hardwareIdStr = ctx.layers.data.data_data_data.replace(':','').substring(1, 3);
               BigInteger hwdIdBigInt = new BigInteger(hardwareIdStr, 16);
               BigInteger bitwiseAnd = new BigInteger('FC', 16);
               BigInteger extractedHardwareId = hwdIdBigInt.and(bitwiseAnd);
               String hwdIdStr =  extractedHardwareId.toString(16);
               ctx.ts.telemetryHwdId = hwdIdStr;
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String sequenceNumberPartStrI = tsRawData.substring(2, 3);
               String sequenceNumberPartStrII = tsRawData.substring(3, 8);
               String sequenceNumberPartStr = tsRawData.substring(2, 8);
               BigInteger sequenceNumberBigInt = new BigInteger(sequenceNumberPartStr, 16);
               BigInteger bitwiseAnd = new BigInteger('7FFFFFF', 16);
               BigInteger updatedSequenceNumber = sequenceNumberBigInt.and(bitwiseAnd);
               // String sequenceNumberHexStr =  updatedSequenceNumber.toString(16);
               ctx.ts.telemetrySequenceNumber = updatedSequenceNumber.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String nodeIdStr = tsRawData.substring(8, 16);
               BigInteger nodeIdBigInt = new BigInteger(nodeIdStr, 16);
               ctx.ts.telemetryNodeId =nodeIdBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String repTypeStr = tsRawData.substring(16, 17);
               BigInteger repTypeBigInt = new BigInteger(repTypeStr, 16);
               ctx.ts.telemetryReportType =repTypeBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
                String inTypeStr = tsRawData.substring(17, 18);
               BigInteger inTypeBigInt = new BigInteger(inTypeStr, 16);
               ctx.ts.telemetryInType = inTypeBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String reportLengthStr = tsRawData.substring(18, 20);
               BigInteger reportLengthBigInt = new BigInteger(reportLengthStr, 16);
               ctx.ts.telemetryReportLength = reportLengthBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String mdLengthStr = tsRawData.substring(20, 22);
               BigInteger mdLengthBigInt = new BigInteger(mdLengthStr, 16);
               ctx.ts.telemetryMDLength = mdLengthBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String dStr = tsRawData.substring(22, 23);
               BigInteger dBigInt = new BigInteger(dStr, 16);
               BigInteger bitwiseAnd = new BigInteger('8', 16);
               BigInteger dRes = dBigInt.and(bitwiseAnd);
               ctx.ts.telemetryD = dRes.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String qStr = tsRawData.substring(22, 23);
               BigInteger qBigInt = new BigInteger(qStr, 16);
               BigInteger bitwiseAnd = new BigInteger('4', 16);
               BigInteger qRes = qBigInt.and(bitwiseAnd);
               ctx.ts.telemetryQ = qRes.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String fStr = tsRawData.substring(22, 23);
               BigInteger fBigInt = new BigInteger(fStr, 16);
               BigInteger bitwiseAnd = new BigInteger('2', 16);
               BigInteger fRes = fBigInt.and(bitwiseAnd);
               ctx.ts.telemetryF = fRes.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String IStr = tsRawData.substring(22, 23);
               BigInteger IBigInt = new BigInteger(IStr, 16);
               BigInteger bitwiseAnd = new BigInteger('1', 16);
               BigInteger IRes = IBigInt.and(bitwiseAnd);
               ctx.ts.telemetryI = IRes.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String rsvdStr = tsRawData.substring(23, 24);
               BigInteger rsvdBigInt = new BigInteger(rsvdStr, 16);
               ctx.ts.telemetryRsvd = rsvdBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
                String repMdBitsStr = tsRawData.substring(24, 28);
               BigInteger repMdBitsBigInt = new BigInteger(repMdBitsStr, 16);
               ctx.ts.telemetryRepMdBits = repMdBitsBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String domainSpecificIDStr = tsRawData.substring(28, 32);
               BigInteger domainSpecificIDBigInt = new BigInteger(domainSpecificIDStr, 16);
               ctx.ts.telemetryDomainSpecificID = domainSpecificIDBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String dsMdBitsStr = tsRawData.substring(32, 36);
               BigInteger dsMdBitsStrBigInt = new BigInteger(dsMdBitsStr, 16);
               ctx.ts.telemetryDsMdBits = dsMdBitsStrBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String dsMdStatusStr = tsRawData.substring(36, 40);
               BigInteger dsMdStatusBigInt = new BigInteger(dsMdStatusStr, 16);
               ctx.ts.telemetryDsMdStatus = dsMdStatusBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
               String varOptStr = tsRawData.substring(40, 48);
               BigInteger varOptBigInt = new BigInteger(varOptStr, 16);
               ctx.ts.telemetryVarOpt = varOptBigInt.intValue();
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
                String etherType = tsRawData.substring(72, 76);
                String ipVersion = tsRawData.substring(76, 77);
                if( etherType == '86dd' && ipVersion == '6')
                {
                  ctx.ts.isIPv6 = true;
                } else
                {
                   ctx.ts.isIPv6 = false;
                }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
               String tsRawData = ctx.layers.data.data_data_data.replace(':','');
                String etherType = tsRawData.substring(72, 76);
                String ipVersion = tsRawData.substring(76, 77);
                if( etherType == '0800' && ipVersion == '4')
                {
                  ctx.ts.isIPv4 = true;
                } else
                {
                   ctx.ts.isIPv4 = false;
                }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               ctx.ts.data = tsRawData.substring(48, 252);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               ctx.ts.data = tsRawData.substring(48, 292);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
               ctx.ts.ethernetHeader = tsRawData.substring(48, 76);
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              ctx.ts.ethernetHeaderDestMac = tsRawData.substring(48, 60);
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              ctx.ts.ethernetHeaderSrcMac = tsRawData.substring(60, 72);
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
             ctx.ts.ethernetHeaderEtherType = tsRawData.substring(72, 76);
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               ctx.ts.IPvData = tsRawData.substring(76, 116);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               ctx.ts.IPvData = tsRawData.substring(76, 156);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               ctx.ts.IPVersion = tsRawData.substring(76, 77);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               ctx.ts.IPVersion = tsRawData.substring(76, 77);
              }
        """
      }
    },
    {
        "script" : {
          "lang" : "painless",
          "ignore_failure" : true,
          "source" : """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               String IPv4SrcIPHexString = tsRawData.substring(100, 108);
               String IPv4SrcIP = "";
                for(int i = 0; i < IPv4SrcIPHexString.length(); i = i + 2) {
                     IPv4SrcIP = IPv4SrcIP + Integer.valueOf(IPv4SrcIPHexString.substring(i, i+2), 16) + ".";
                }
                IPv4SrcIP = IPv4SrcIP.substring(0, IPv4SrcIP.length()-1);
                ctx.ts.IPv4SrcIP = IPv4SrcIP;
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               String IPv6SrcIPHexString = tsRawData.substring(92,124);
               String IPv6SrcIP = "";
                for(int i = 0; i < IPv6SrcIPHexString.length(); i = i + 2) {
                     IPv6SrcIP = IPv6SrcIP + Integer.valueOf(IPv6SrcIPHexString.substring(i, i+2), 16) + ".";
                }
                IPv6SrcIP = IPv6SrcIP.substring(0, IPv6SrcIP.length()-1);
                ctx.ts.IPv6SrcIP = IPv6SrcIP;
              }
        """
        }
      },
      {
        "script" : {
          "lang" : "painless",
          "ignore_failure" : true,
          "source" : """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               String IPv4DestIPHexString = tsRawData.substring(108, 116);
               String IPv4DestIP = "";
                for(int i = 0; i < IPv4DestIPHexString.length(); i = i + 2) {
                     IPv4DestIP = IPv4DestIP + Integer.valueOf(IPv4DestIPHexString.substring(i, i+2), 16) + ".";
                }
                IPv4DestIP = IPv4DestIP.substring(0, IPv4DestIP.length()-1);
                ctx.ts.IPv4DestIP = IPv4DestIP;
              }
              if( etherType == '86dd' && ipVersion == '6')
             {
               String IPv6DestIPHexString = tsRawData.substring(124,156);
               String IPv6DestIP = "";
                for(int i = 0; i < IPv6DestIPHexString.length(); i = i + 2) {
                     IPv6DestIP = IPv6DestIP + Integer.valueOf(IPv6DestIPHexString.substring(i, i+2), 16) + ".";
                }
                IPv6DestIP = IPv6DestIP.substring(0, IPv6DestIP.length()-1);
                ctx.ts.IPv6DestIP = IPv6DestIP;
              }
        """
        }
      },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               ctx.ts.UDGPData = tsRawData.substring(116, 132);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               ctx.ts.UDGPData = tsRawData.substring(156, 172);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               String UDGSrcPortStr =  tsRawData.substring(116, 120);
               BigInteger UDGSrcPortBigInt = new BigInteger(UDGSrcPortStr, 16);
               ctx.ts.UDGSrcPort = UDGSrcPortBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               String UDGSrcPortStr =  tsRawData.substring(156, 160);
               BigInteger UDGSrcPortBigInt = new BigInteger(UDGSrcPortStr, 16);
               ctx.ts.UDGSrcPort = UDGSrcPortBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               String UDGDstPortStr =  tsRawData.substring(120, 124);
               BigInteger UDGDstPortBigInt = new BigInteger(UDGDstPortStr, 16);
               ctx.ts.UDGDstPort = UDGDstPortBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               String UDGDstPortStr =  tsRawData.substring(160, 164);
               BigInteger UDGDstPortBigInt = new BigInteger(UDGDstPortStr, 16);
               ctx.ts.UDGDstPort = UDGDstPortBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               String UDGLengthStr =  tsRawData.substring(124, 128);
               BigInteger UDGLengthBigInt = new BigInteger(UDGLengthStr, 16);
               ctx.ts.UDGLength = UDGLengthBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               String UDGLengthStr =  tsRawData.substring(164, 168);
               BigInteger UDGLengthBigInt = new BigInteger(UDGLengthStr, 16);
               ctx.ts.UDGLength = UDGLengthBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               String UDGChecksumStr =  tsRawData.substring(128, 132);
               BigInteger UDGChecksumBigInt = new BigInteger(UDGChecksumStr, 16);
               ctx.ts.UDGChecksum = UDGChecksumBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               String UDGChecksumStr =  tsRawData.substring(168, 172);
               BigInteger UDGChecksumBigInt = new BigInteger(UDGChecksumStr, 16);
               ctx.ts.UDGChecksum = UDGChecksumBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               ctx.ts.InBandNetworkTelemetryData = tsRawData.substring(132, 196);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               ctx.ts.InBandNetworkTelemetryData = tsRawData.substring(172, 236);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               ctx.ts.UDPIntShimHeaderData = tsRawData.substring(132, 140);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               ctx.ts.UDPIntShimHeaderData = tsRawData.substring(172, 180);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
               ctx.ts.UDPIntShimHeaderType = tsRawData.substring(132, 133);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
               ctx.ts.UDPIntShimHeaderType = tsRawData.substring(172, 173);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                String udpIntShimNPTStr =  tsRawData.substring(133, 134);
                BigInteger udpIntShimNPTBigInt =  new BigInteger(udpIntShimNPTStr, 16);
                BigInteger bitwiseAnd = new BigInteger('C', 16);
                BigInteger result = udpIntShimNPTBigInt.and(bitwiseAnd);
                ctx.ts.UDPIntShimHeaderNPT = result.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  String udpIntShimNPTStr =  tsRawData.substring(173, 174);
                  BigInteger udpIntShimNPTBigInt =  new BigInteger(udpIntShimNPTStr, 16);
                  BigInteger bitwiseAnd = new BigInteger('C', 16);
                  BigInteger result = udpIntShimNPTBigInt.and(bitwiseAnd);
                  ctx.ts.UDPIntShimHeaderNPT = result.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                ctx.ts.UDPIntShimHeaderRes1 = tsRawData.substring(133, 134);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.UDPIntShimHeaderRes1 = tsRawData.substring(174, 175);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                String lengthStr = tsRawData.substring(134, 136);
                BigInteger lengthStrBigInt =  new BigInteger(lengthStr, 16);
                ctx.ts.UDPIntShimHeaderLength= lengthStrBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  String lengthStr = tsRawData.substring(174, 176);
                  BigInteger lengthStrBigInt =  new BigInteger(lengthStr, 16);
                  ctx.ts.UDPIntShimHeaderLength = lengthStrBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                ctx.ts.UDPIntShimHeaderRes2 = tsRawData.substring(136, 138);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.UDPIntShimHeaderRes2 = tsRawData.substring(176, 178);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 String nextProtoStr = tsRawData.substring(138, 140);
                 BigInteger nextProtoBigInt =  new BigInteger(nextProtoStr, 16);
                ctx.ts.UDPIntShimHeaderNextProto = nextProtoBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                   String nextProtoStr = tsRawData.substring(178, 180);
                   BigInteger nextProtoBigInt =  new BigInteger(nextProtoStr, 16);
                  ctx.ts.UDPIntShimHeaderNextProto = nextProtoBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.INTMetadataHeaderData = tsRawData.substring(140, 164);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                   ctx.ts.INTMetadataHeaderData =  tsRawData.substring(180, 204);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 String UDPIntMetaDataHeaderVersionStr = tsRawData.substring(140, 141);
                BigInteger UDPIntMetaDataHeaderVersionStrBigInt =  new BigInteger(UDPIntMetaDataHeaderVersionStr, 16);
                ctx.ts.UDPIntMetaDataHeaderVersion =  UDPIntMetaDataHeaderVersionStrBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                String UDPIntMetaDataHeaderVersionStr = tsRawData.substring(180, 181);
                BigInteger UDPIntMetaDataHeaderVersionStrBigInt =  new BigInteger(UDPIntMetaDataHeaderVersionStr, 16);
                ctx.ts.UDPIntMetaDataHeaderVersion =  UDPIntMetaDataHeaderVersionStrBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                String UDPIntMetaDataHeaderRes = tsRawData.substring(141, 142);
                BigInteger UDPIntMetaDataHeaderResBigInt =  new BigInteger(UDPIntMetaDataHeaderRes, 16);
                BigInteger bitwiseAnd = new BigInteger('C', 16);
                BigInteger result = UDPIntMetaDataHeaderResBigInt.and(bitwiseAnd);
                ctx.ts.UDPIntMetaDataHeaderRes =  result.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                String UDPIntMetaDataHeaderRes = tsRawData.substring(181, 182);
                BigInteger UDPIntMetaDataHeaderResBigInt =  new BigInteger(UDPIntMetaDataHeaderRes, 16);
                BigInteger bitwiseAnd = new BigInteger('C', 16);
                BigInteger result = UDPIntMetaDataHeaderResBigInt.and(bitwiseAnd);
                ctx.ts.UDPIntMetaDataHeaderRes =  result.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                String UDPIntMetaDataHeaderD = tsRawData.substring(141, 142);
                BigInteger UDPIntMetaDataHeaderDBigInt =  new BigInteger(UDPIntMetaDataHeaderD, 16);
                BigInteger bitwiseAnd = new BigInteger('2', 16);
                BigInteger result = UDPIntMetaDataHeaderDBigInt.and(bitwiseAnd);
                ctx.ts.UDPIntMetaDataHeaderD =  result.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                String UDPIntMetaDataHeaderD =  tsRawData.substring(181, 182);
                BigInteger UDPIntMetaDataHeaderDBigInt =  new BigInteger(UDPIntMetaDataHeaderD, 16);
                BigInteger bitwiseAnd = new BigInteger('2', 16);
                BigInteger result = UDPIntMetaDataHeaderDBigInt.and(bitwiseAnd);
                ctx.ts.UDPIntMetaDataHeaderD =  result.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                  String UDPIntMetaDataHeaderE = tsRawData.substring(141, 142);
                  BigInteger UDPIntMetaDataHeaderEBigInt =  new BigInteger(UDPIntMetaDataHeaderE, 16);
                  BigInteger bitwiseAnd = new BigInteger('1', 16);
                  BigInteger result = UDPIntMetaDataHeaderEBigInt.and(bitwiseAnd);
                  ctx.ts.UDPIntMetaDataHeaderE =  result.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                 String UDPIntMetaDataHeaderE = tsRawData.substring(181, 182);
                 BigInteger UDPIntMetaDataHeaderEBigInt =  new BigInteger(UDPIntMetaDataHeaderE, 16);
                 BigInteger bitwiseAnd = new BigInteger('1', 16);
                 BigInteger result = UDPIntMetaDataHeaderEBigInt.and(bitwiseAnd);
                 ctx.ts.UDPIntMetaDataHeaderE =  result.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                  String UDPIntMetaDataHeaderM = tsRawData.substring(142, 143);
                  BigInteger UDPIntMetaDataHeaderMBigInt =  new BigInteger(UDPIntMetaDataHeaderM, 16);
                  BigInteger bitwiseAnd = new BigInteger('8', 16);
                  BigInteger result = UDPIntMetaDataHeaderMBigInt.and(bitwiseAnd);
                  ctx.ts.UDPIntMetaDataHeaderM =  result.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  String UDPIntMetaDataHeaderM = tsRawData.substring(182, 183);
                  BigInteger UDPIntMetaDataHeaderMBigInt =  new BigInteger(UDPIntMetaDataHeaderM, 16);
                  BigInteger bitwiseAnd = new BigInteger('8', 16);
                  BigInteger result = UDPIntMetaDataHeaderMBigInt.and(bitwiseAnd);
                  ctx.ts.UDPIntMetaDataHeaderM =  result.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                  String UDPIntMetaDataHeaderPerhopMetadataLengthStr = tsRawData.substring(144, 146);
                  BigInteger UDPIntMetaDataHeaderPerhopMetadataLengthBigInt =  new BigInteger(UDPIntMetaDataHeaderPerhopMetadataLengthStr, 16);
                  BigInteger bitwiseAnd = new BigInteger('1F', 16);
                  BigInteger result = UDPIntMetaDataHeaderPerhopMetadataLengthBigInt.and(bitwiseAnd);
                  ctx.ts.UDPIntMetaDataHeaderPerhopMetadataLength =  result.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  String UDPIntMetaDataHeaderPerhopMetadataLengthStr =  tsRawData.substring(184, 186);
                  BigInteger UDPIntMetaDataHeaderPerhopMetadataLengthBigInt =  new BigInteger(UDPIntMetaDataHeaderPerhopMetadataLengthStr, 16);
                  BigInteger bitwiseAnd = new BigInteger('1F', 16);
                  BigInteger result = UDPIntMetaDataHeaderPerhopMetadataLengthBigInt.and(bitwiseAnd);
                  ctx.ts.UDPIntMetaDataHeaderPerhopMetadataLength =  result.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                  String UDPIntMetaDataHeaderRemainingHopCntStr = tsRawData.substring(146, 148);
                  BigInteger UDPIntMetaDataHeaderRemainingHopCntBigInt =  new BigInteger(UDPIntMetaDataHeaderRemainingHopCntStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderRemainingHopCnt =  UDPIntMetaDataHeaderRemainingHopCntBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  String UDPIntMetaDataHeaderRemainingHopCntStr = tsRawData.substring(186, 188);
                  BigInteger UDPIntMetaDataHeaderRemainingHopCntBigInt =  new BigInteger(UDPIntMetaDataHeaderRemainingHopCntStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderRemainingHopCnt =  UDPIntMetaDataHeaderRemainingHopCntBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                  String UDPIntMetaDataHeaderInstructionBitmapStr = tsRawData.substring(148, 152);
                  BigInteger UDPIntMetaDataHeaderInstructionBitmapBigInt =  new BigInteger(UDPIntMetaDataHeaderInstructionBitmapStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderInstructionBitmap =  UDPIntMetaDataHeaderInstructionBitmapBigInt.toString(16);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  String UDPIntMetaDataHeaderInstructionBitmapStr = tsRawData.substring(188, 192);
                  BigInteger UDPIntMetaDataHeaderInstructionBitmapBigInt =  new BigInteger(UDPIntMetaDataHeaderInstructionBitmapStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderInstructionBitmap =  UDPIntMetaDataHeaderInstructionBitmapBigInt.toString(16);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                  String UDPIntMetaDataHeaderDomainSpecificIDStr = tsRawData.substring(152, 156);
                  BigInteger UDPIntMetaDataHeaderDomainSpecificIDBigInt =  new BigInteger(UDPIntMetaDataHeaderDomainSpecificIDStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderDomainSpecificID =  UDPIntMetaDataHeaderDomainSpecificIDBigInt.toString(16);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                   String UDPIntMetaDataHeaderDomainSpecificIDStr = tsRawData.substring(192, 196);
                  BigInteger UDPIntMetaDataHeaderDomainSpecificIDBigInt =  new BigInteger(UDPIntMetaDataHeaderDomainSpecificIDStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderDomainSpecificID =  UDPIntMetaDataHeaderDomainSpecificIDBigInt.toString(16);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                  String UDPIntMetaDataHeaderDSInstructionStr = tsRawData.substring(156, 160);
                  BigInteger UDPIntMetaDataHeaderDSInstructionBigInt =  new BigInteger(UDPIntMetaDataHeaderDSInstructionStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderDSInstruction =  UDPIntMetaDataHeaderDSInstructionBigInt.toString(16);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                   String UDPIntMetaDataHeaderDSInstructionStr = tsRawData.substring(196, 200);
                  BigInteger UDPIntMetaDataHeaderDSInstructionBigInt =  new BigInteger(UDPIntMetaDataHeaderDSInstructionStr, 16);
                  ctx.ts.UDPIntMetaDataHeaderDSInstruction =  UDPIntMetaDataHeaderDSInstructionBigInt.toString(16);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 String UDPIntMetaDataHeaderDSFlagsStr = tsRawData.substring(160, 164);
                 BigInteger UDPIntMetaDataHeaderDSFlagsBigInt =  new BigInteger(UDPIntMetaDataHeaderDSFlagsStr, 16);
                 ctx.ts.UDPIntMetaDataHeaderDSFlags = UDPIntMetaDataHeaderDSFlagsBigInt.toString(16);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                 String UDPIntMetaDataHeaderDSFlagsStr = tsRawData.substring(200, 204);
                 BigInteger UDPIntMetaDataHeaderDSFlagsBigInt =  new BigInteger(UDPIntMetaDataHeaderDSFlagsStr, 16);
                 ctx.ts.UDPIntMetaDataHeaderDSFlags = UDPIntMetaDataHeaderDSFlagsBigInt.toString(16);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.INTMetadataStackData = tsRawData.substring(164, 196);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                 ctx.ts.INTMetadataStackData = tsRawData.substring(204, 236);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.INTMetadataStackSwitchID = tsRawData.substring(164, 172);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.INTMetadataStackSwitchID = tsRawData.substring(204, 212);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.INTMetadataSourceMetadata = tsRawData.substring(172, 196);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.INTMetadataSourceMetadata = tsRawData.substring(212, 236);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.INTMetadataSourceMetadataSwitchId = tsRawData.substring(172, 180);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.INTMetadataSourceMetadataSwitchId = tsRawData.substring(212, 220);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.INTMetadataSourceMetadataOriginatingMac = tsRawData.substring(180, 192);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.INTMetadataSourceMetadataOriginatingMac = tsRawData.substring(220, 232);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.INTMetadataSourceMetadataReserved = tsRawData.substring(192, 196);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.INTMetadataSourceMetadataReserved = tsRawData.substring(232, 236);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.UDP2Data = tsRawData.substring(196, 212);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                  ctx.ts.UDP2Data = tsRawData.substring(236, 252);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 String UDP2SrcPortStr = tsRawData.substring(196, 200);
                 BigInteger UDP2SrcPortBigInt = new BigInteger(UDP2SrcPortStr,16);
                 ctx.ts.UDP2SrcPort = UDP2SrcPortBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                   String UDP2SrcPortStr =  tsRawData.substring(236, 240);
                   BigInteger UDP2SrcPortBigInt = new BigInteger(UDP2SrcPortStr,16);
                   ctx.ts.UDP2SrcPort = UDP2SrcPortBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 String UDP2DstPortStr = tsRawData.substring(200, 204);
                 BigInteger UDP2DstPortBigInt = new BigInteger(UDP2DstPortStr,16);
                 ctx.ts.UDP2DstPort = UDP2DstPortBigInt.intValue();
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                 String UDP2DstPortStr = tsRawData.substring(240, 244);
                 BigInteger UDP2DstPortBigInt = new BigInteger(UDP2DstPortStr,16);
                 ctx.ts.UDP2DstPort = UDP2DstPortBigInt.intValue();
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.UDP2Length = tsRawData.substring(204, 208);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                 ctx.ts.UDP2Length = tsRawData.substring(244, 248);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.UDP2Checksum = tsRawData.substring(208, 212);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                 ctx.ts.UDP2Checksum = tsRawData.substring(248, 252);
              }
        """
      }
    },
    {
      "script": {
        "lang": "painless",
        "ignore_failure": true,
          "source": """
              String tsRawData = ctx.layers.data.data_data_data.replace(':','');
              String etherType = tsRawData.substring(72, 76);
              String ipVersion = tsRawData.substring(76, 77);
              if( etherType == '0800' && ipVersion == '4')
              {
                 ctx.ts.dataII = tsRawData.substring(212, 252);
              }
              if( etherType == '86dd' && ipVersion == '6')
              {
                 ctx.ts.dataII = tsRawData.substring(252, 292);
              }
        """
      }
    }
  ]
}
