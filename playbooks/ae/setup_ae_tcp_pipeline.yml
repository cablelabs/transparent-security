# Copyright (c) 2020 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#Import playbook
- import_playbook: setup_ae_elk.yml

- hosts: ae
  gather_facts: no
  vars:
    - CENTOS_HOME: "/home/centos"
  tasks:
    - name: POST call to create TCP data mapping template for incoming data in Elasticsearch
      uri:
        url: "http://localhost:9200/_template/packets"
        method: PUT
        return_content: yes
        body: "{{ lookup('file','./templates/tcp/tcp_data_mapping.json') }}"
        body_format: json
      register: tcp_template_response

    - name: POST call to create data parsing pipeline for TCP v4 and UDP v6 for incoming data in Elasticsearch
      uri:
        url: "http://localhost:9200/_ingest/pipeline/ts_parsing"
        method: PUT
        return_content: yes
        body: "{{ lookup('file','./templates/tcp/tcp_data_parsing.json') }}"
        body_format: json
      register: ts_pipeline_response

    - name: POST call to create SDN Aggregate attack webhook to attach to monitor for incoming data in Elasticsearch
      uri:
         url: "http://localhost:9200/_opendistro/_alerting/destinations"
         method: POST
         return_content: yes
         status_code: 201
         body: "{{ lookup('file','./templates/sdn_attack_webhook.json') }}"
         body_format: json
      register: sdn_webhook_response

    - name: Set SDN Webhook call response
      set_fact:
        sdn_webhook_response: "{{ sdn_webhook_response.json }}"

    - name: Set SDN Webhook ID from response
      set_fact:
        sdn_webhook_id: "{{ sdn_webhook_response._id }}"

    - name: Fetch created SDN webhook ID for creating associated monitor
      debug:
        msg: " SDN Webhook response Id : {{ sdn_webhook_id }}"

    - name: Ensures {{ remote_scripts_dir }} exists
      become: yes
      file:
        path: "{{ remote_scripts_dir }}"
        state: directory

    - name: Ensure {{ remote_scripts_dir }} directories are 777
      become: yes
      shell: "chmod -R 777 transparent-security"
      args:
        chdir: "/etc"

    - name: Copy file udp_monitor_def.json to  {{ remote_scripts_dir }} for updates
      copy:
        src: "{{ trans_sec_dir }}/playbooks/ae/templates/tcp/tcp_monitor_def.json"
        dest: "{{ remote_scripts_dir }}/tcp_monitor_def.json"
        remote_src: yes
        force: yes

    - name: Replace SDN Webhook ID in TCP monitor definition file
      become: yes
      tags: monitorUpdate
      lineinfile:
        path: "{{ remote_scripts_dir }}/tcp_monitor_def.json"
        regex: 'sdnWebhookResponseId'
        line: ' "destination_id": "{{sdn_webhook_id}}",'
        state: present
        backup: yes
      register: monitorUpdateOut

    - name: Slurp updated monitor definition and save it to be used in POST request.
      slurp:
        src: "{{ remote_scripts_dir }}/tcp_monitor_def.json"
        register: slurped_updated_tcp_monitor_def

    - name: Set updated_tcp_monitor_def as fact
      set_fact:
        updated_tcp_monitor_def_contents: "{{ slurped_updated_tcp_monitor_def.content | b64decode }}"

    - name: Show Updated monitor definition
      debug:
        var: updated_tcp_monitor_def_contents

    - name: POST call to create Monitor,trigger and action for TCP DDOS Detection and Mitigation Pipeline for incoming data in Elasticsearch
      uri:
        url: "http://localhost:9200/_opendistro/_alerting/monitors"
        method: POST
        return_content: yes
        status_code: 201
        body: "{{ updated_tcp_monitor_def_contents }}"
        body_format: json
      register: tcp_monitor_response
