# Copyright (c) 2020 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: ae
  gather_facts: no
  tasks:
    - name: "Start Elasticsearch service"
      become: yes
      service:
        name: elasticsearch
        state: started
        enabled: yes

    - name: "Start Kibana service"
      become: yes
      service:
        name: kibana
        state: started
        enabled: yes

    - name: Wait for Kibana to startup at port 5601
      wait_for:
        port: 5601
        timeout: 600

    - name: Sleep for 180 seconds to help Kibana service up and running
      tags: sleep180
      wait_for:
        delay: 180
        timeout: 0

    - name: "Validate if a DNS tps.sdn.org is present in /etc/hosts file"
      become: yes
      tags: sdnDnsName
      lineinfile:
        path: /etc/hosts
        regexp: "tps.sdn.org"
        line: "tps.sdn.org {{sdn_ip}}"
        state: present
        backup: yes
      register: sdnDnsNameOut

    - name: POST call to create data mapping template for incoming data in Elasticsearch
      uri:
        url: "http://localhost:9200/_template/packets"
        method: PUT
        return_content: yes
        body: "{{ lookup('file','./templates/udp_data_mapping.json') }}"
        body_format: json
      register: udp_template_response

    - name: POST call to create data parsing pipeline for UDP v4 and UDP v6 for incoming data in Elasticsearch
      uri:
        url: "http://localhost:9200/_ingest/pipeline/ts_parsing"
        method: PUT
        return_content: yes
        body: "{{ lookup('file','./templates/udp_data_parsing.json') }}"
        body_format: json
      register: ts_pipeline_response

    - name: POST call to create SDN Aggregate attack webhook to attach to UDP monitor for incoming data in Elasticsearch
      uri:
        url: "http://localhost:9200/_opendistro/_alerting/destinations"
        method: POST
        return_content: yes
        status_code: 201
        body: "{{ lookup('file','./templates/sdn_attack_webhook.json') }}"
        body_format: json
      register: sdn_webhook_response

    - name: Set SDN Webhook call response
      set_fact:
        sdn_webhook_response: "{{ sdn_webhook_response.json }}"

    - name: Set SDN Webhook ID from response
      set_fact:
        sdn_webhook_id: "{{ sdn_webhook_response._id }}"

    - name: Fetch created SDN webhook ID for creating associated monitor
      debug:
        msg: " SDN Webhook response Id : {{ sdn_webhook_id }}"


    - name: Copy file udp_monitor_def to remote location from local file system
      become: yes
      copy:
        src: "./templates/udp_monitor_def.json"
        dest: "{{remote_scripts_dir}}"
        force: yes

    - name: Replace SDN Webhook ID in monitor definition file
      become: yes
      tags: monitorUpdate
      lineinfile:
        path: "{{remote_scripts_dir}}/udp_monitor_def.json"
        regex: 'sdnWebhookResponseId'
        line: ' "destination_id": "{{sdn_webhook_id}}",'
        state: present
        backup: yes
      register: monitorUpdateOut

    - name: Slurp updated monitor definition and save it to be used in POST request.
      slurp:
        src: "{{remote_scripts_dir}}/udp_monitor_def.json"
      register: slurped_updated_udp_monitor_def

    - name: Set updated_udp_monitor_def as fact
      set_fact:
        updated_udp_monitor_def_contents: "{{ slurped_updated_udp_monitor_def.content | b64decode }}"

    - name: Show Updated monitor definition
      debug:
        var: updated_udp_monitor_def_contents

    - name: POST call to create Monitor,trigger and action for UDP DDOS Detection and Mitigation Pipeline for incoming data in Elasticsearch
      uri:
        url: "http://localhost:9200/_opendistro/_alerting/monitors"
        method: POST
        return_content: yes
        status_code: 201
        body: "{{ updated_udp_monitor_def_contents }}"
        body_format: json
      register: udp_monitor_response

    - name: POST call to create Index Pattern
      uri:
        url: "http://localhost:5601/api/saved_objects/index-pattern/packets-*"
        method: POST
        headers:
          kbn-xsrf: "true"
          Content-Type: "application/json"
        return_content: yes
        status_code: 200
        body: "{{ lookup('file','./templates/index_pattern_request_body.json') }}"
        body_format: json
      register: index_pattern_response

