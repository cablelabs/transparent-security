# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# see https://community.hetzner.com/tutorials/linux-setup-gre-tunnel
---
- name: Processing item value
  debug:
    var: item

- name: install dependecies
  apt:
    name:
      - bridge-utils
      - iptables
      - iproute2

- name: extract this_host and remote_host (item_host) from topology
  set_fact:
    this_host: "{{ topo_dict.hosts.get(ansible_host) }}"
    remote_host: "{{ topo_dict.hosts.get(item.host) }}"

- name: set this_host from switches when not in hosts
  set_fact:
    this_host: "{{ topo_dict.switches.get(ansible_host) }}"
  when: not this_host

- name: item.host value
  set_fact:
    item_host: item.host

- name: set remote_host from switches when not in hosts
  set_fact:
    remote_host: "{{ topo_dict.switches.get(item.host)  }}"
  when: not remote_host

- name: Set tunnel facts
  set_fact:
    tunnel1: "{{ item.host }}-tun1"

- name: Determine if {{ tunnel1 }} has already been created
  command: "ip link show {{ tunnel1 }}"
  register: intf_exist
  ignore_errors: yes

# TODO/FIXME - This is only a problem with lab_trial but why is it attempting to create the same tunnel with the same name 2x
- name: GRE Tunnel Block
  block:
    - name: Create GRE tunnel 1 command
      set_fact:
        gre_tunnel1_cmd: >
          ip link add {{ tunnel1 }} type gretap local {{ this_host.tun1_ip }}
          remote {{ remote_host.tun1_ip }}

    - name: Show the GRE tunnel 1 command
      debug:
        var: gre_tunnel1_cmd

    - name: Create GRE tunnel1
      command: "{{ gre_tunnel1_cmd }}"

    # Bring up tunnel
    - name: set gre tunnel 1 up - {{ tunnel1 }}
      command: "ip link set {{ tunnel1 }} up"
  when: intf_exist is failed and remote_host is defined and remote_host != ""

- name: Setup host communication ports to send/receive packets
  block:
    - name: Set interface name for {{ this_host.name }}
      set_fact:
        mirrored_host_intf: "{{ this_host.name }}-eth0"

    - name: Delete final output port {{ mirrored_host_intf }} if exists
      command: "ip link del {{ mirrored_host_intf }} type dummy"
      ignore_errors: yes

    - name: Create final output port {{ mirrored_host_intf }}
      command: "ip link add {{ mirrored_host_intf }} type dummy"

    - name: set MAC {{ this_host.mac }} on {{ mirrored_host_intf }}
      command: "ip link set dev {{ mirrored_host_intf }} address {{ this_host.mac }}"

    - name: Set IP {{ this_host.ip }}/24 on {{ mirrored_host_intf }}
      command: "ip addr add {{ this_host.ip }}/24 dev {{ mirrored_host_intf }}"

    - name: set host mirrored interface up - {{ mirrored_host_intf }}
      command: "ip link set {{ mirrored_host_intf }} up"

    - name: Configure port mirroring for egress traffic
      command: "tc qdisc add dev {{ mirrored_host_intf }} handle 1: root prio"

    - name: Set qdisc filter for egress traffic directed into tunnel
      command: >
        tc filter add dev {{ mirrored_host_intf }} parent 1: protocol all
        u32 match u32 0 0 action mirred egress mirror dev {{ tunnel1 }}

    - name: Configure port mirroring for ingress traffic
      command: "tc qdisc add dev {{ tunnel1 }} handle ffff: ingress"

    - name: Set qdisc filter for ingress traffic directed from tunnel
      command: >
        tc filter add dev {{ tunnel1 }} parent ffff: protocol all
        u32 match u32 0 0 action mirred ingress mirror dev {{ mirrored_host_intf }}
  when: item.switch_port is not defined

