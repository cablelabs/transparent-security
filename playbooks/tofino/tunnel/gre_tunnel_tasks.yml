# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# see https://community.hetzner.com/tutorials/linux-setup-gre-tunnel
---
- name: Processing item value
  debug:
    var: item

- name: install dependecies
  apt:
    name:
      - bridge-utils
      - iptables
      - iproute2

- name: extract this_host and remote_host (item_host) from topology
  set_fact:
    this_host: "{{ topo_dict.hosts.get(ansible_host) }}"
    remote_host: "{{ topo_dict.hosts.get(item.host) }}"

- name: Display the remote_host
  debug:
    var: remote_host

- name: set this_host from switches when not in hosts
  set_fact:
    this_host: "{{ topo_dict.switches.get(ansible_host) }}"
  when: not this_host

- name: item.host value
  set_fact:
    item_host: item.host
- name: Retrieve switch from topology
  set_fact:
    switch: "{{ topo_dict.switches.get(item_host) }}"

- name: set remote_host from switches when not in hosts
  set_fact:
    remote_host: "{{ topo_dict.switches.get(item.host)  }}"
  when: not remote_host

- debug:
    var: this_host
- debug:
    var: remote_host
- name: Retrieve the local IP
  set_fact:
    local_tun1_ip: "{{ this_host.tun1_ip }}"
    local_tun2_ip: "{{ this_host.tun2_ip }}"
    remote_tun1_ip: "{{ remote_host.tun1_ip }}"
    remote_tun2_ip: "{{ remote_host.tun2_ip }}"

- name: Create GRE tunnel 1 command
  set_fact:
    gre_tunnel1_cmd: >
      ip link add {{ item.host }}-tun1 type gretap local {{ local_tun1_ip }}
      remote {{ remote_tun1_ip }}
  when: remote_host is defined and remote_host != ""

- name: Show the GRE tunnel 1 command
  debug:
    var: gre_tunnel1_cmd
  when: remote_host is defined and remote_host != ""

- name: Create GRE tunnel1
  command: "{{ gre_tunnel1_cmd }}"
  when: gre_tunnel1_cmd is defined

- name: Create GRE tunnel 2 command
  set_fact:
    gre_tunnel2_cmd: >
      ip link add {{ item.host }}-tun2 type gretap local {{ local_tun2_ip }}
      remote {{ remote_tun2_ip }}
  when: remote_host is defined and remote_host != ""

- name: Show the GRE tunnel 2 command
  debug:
    var: gre_tunnel2_cmd
  when: remote_host is defined and remote_host != ""

- name: Create GRE tunnel2
  command: "{{ gre_tunnel2_cmd }}"
  when: gre_tunnel2_cmd is defined

# Setup Bridge 1 on nodes and switches
- name: stop bridge 1 {{ item.bridge_name }}
  command: "ip link set {{ item.host }}-br1 down"
  ignore_errors: yes

- name: delete bridge 1 {{ item.host }}-br1
  command: "brctl delbr {{ item.host }}-br1"
  ignore_errors: yes

- name: create bridge 1 {{ item.host }}-br1
  command: "brctl addbr {{ item.host }}-br1"

- name: create port {{ item.host }}-br1 -> {{ item.host }}-tun1
  command: "brctl addif {{ item.host }}-br1 {{ item.host }}-tun1"

- name: Add switch ingress port {{ item.virt_in_intf }} to {{ item.host }}-br1
  command: "brctl addif {{ item.host }}-br1 {{ item.virt_in_intf }}"
  when: item.switch_port is defined

#- name: Add node ingress port {{ item.host }}-tun2 to {{ item.host }}-br1
#  command: "brctl addif {{ item.host }}-br1 {{ item.host }}-tun2"
#  when: item.switch_port is not defined

# Setup Bridge 2 on switches
- name: stop bridge 2 {{ item.bridge_name }}
  command: "ip link set {{ item.host }}-br2 down"
  ignore_errors: yes
  when: item.switch_port is defined

- name: delete bridge 2 {{ item.host }}-br2
  command: "brctl delbr {{ item.host }}-br2"
  ignore_errors: yes
  when: item.switch_port is defined

- name: create bridge 2 {{ item.host }}-br2
  command: "brctl addbr {{ item.host }}-br2"
  when: item.switch_port is defined

- name: create port {{ item.host }}-br2 -> {{ item.host }}-tun2
  command: "brctl addif {{ item.host }}-br2 {{ item.host }}-tun2"
  when: item.switch_port is defined

- name: Add ingress port {{ item.virt_out_intf }} to {{ item.host }}-br2
  command: "brctl addif {{ item.host }}-br2 {{ item.virt_out_intf }}"
  when: item.switch_port is defined

# Bridge host tunnels
- name: set IP {{ this_host.ip }}/24 on {{ item.host }}-br1
  command: "ip addr add {{ this_host.ip }}/24 dev {{ item.host }}-br1"
  when: item.switch_port is not defined

- name: set MAC {{ this_host.mac }} on {{ item.host }}-br1
  command: "ip link set dev {{ item.host }}-br1 address {{ this_host.mac }}"
  when: item.switch_port is not defined

# bring up bridges
- name: set bridge up - {{ item.host }}-br1
  command: "ip link set {{ item.host }}-br1 up"

- name: set bridge up - {{ item.host }}-br2
  command: "ip link set {{ item.host }}-br2 up"
  when: item.switch_port is defined

#- name: add {{ this_host.ip }} to host routes on {{ item.host }}-br1
#  command: "ip route add {{ this_host.ip }}/24 dev {{ item.host }}-br1"
#  when: item.switch_port is not defined

# bring up tunnels
- name: set gre tunnel 1 up - {{ item.host }}-tun
  command: "ip link set {{ item.host }}-tun1 up"

- name: set gre tunnel 2 up - {{ item.host }}-tun
  command: "ip link set {{ item.host }}-tun2 up"
