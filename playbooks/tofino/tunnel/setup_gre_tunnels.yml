# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Create configured GRE tunnels on the switch VMs
- hosts:
    - switches
    - hosts
  gather_facts: no
  become: yes
  tasks:
    - name: uninstall ip_gre module
      modprobe:
        name: ip_gre
        state: absent
      async: 10
      ignore_errors: yes

    - name: install ip_gre module
      modprobe:
        name: ip_gre
        state: present

    - name: install ip_gre module
      lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.ip_forward=1"

    - name: Read topology {{ topo_file_loc }}
      set_fact:
        topo_dict: "{{ lookup('file','{{ topo_file_loc }}') | from_yaml }}"

    - name: Retrieve host from topology
      set_fact:
        host: "{{ topo_dict.hosts.get(ansible_host) }}"

    - name: Retrieve switch from topology
      set_fact:
        switch: "{{ topo_dict.switches.get(ansible_host) }}"

    - name: Retrieve this_host from hosts within topology
      set_fact:
        this_host: "{{ topo_dict.hosts.get(ansible_host) }}"

    - name: Retrieve this_host from switches within topology when host not found
      set_fact:
        this_host: "{{ topo_dict.switches.get(ansible_host) }}"
      when: this_host is not defined or this_host == ""

    - debug:
        var: this_host
    - name: Retrieve this_host tunnel IPs
      set_fact:
        tun1_ip: "{{ this_host.tun1_ip }}"
        tun2_ip: "{{ this_host.tun2_ip }}"

    - debug:
        var: tun1_ip
    - debug:
        var: tun2_ip

    - name: delete IP {{ tun1_ip }}/24 on eth1 for tunnel 1 if exists
      command: "ip addr del {{ tun1_ip }}/24 dev eth1"
      ignore_errors: yes

    - name: set IP {{ tun1_ip }}/24 on eth1 for tunnel 1
      command: "ip addr add {{ tun1_ip }}/24 dev eth1"

    - name: set eth1 up
      command: "ip link set eth1 up"

#    - name: add route {{ tun1_ip }} to host routes on eth1
#      command: "ip route add {{ tun1_ip }}/24 dev eth1"

    - name: delete IP {{ tun2_ip }}/24 on eth2 for tunnel 2 if exists
      command: "ip addr del {{ tun2_ip }}/24 dev eth2"
      ignore_errors: yes

    - name: set IP {{ tun2_ip }}/24 on eth2 for tunnel 2
      command: "ip addr add {{ tun2_ip }}/24 dev eth2"

    - name: set eth2 up
      command: "ip link set eth2 up"

#    - name: add route {{ tun2_ip }} to host routes on eth2
#      command: "ip route add {{ tun2_ip }}/24 dev eth2"

    - include_tasks: gre_tunnel_tasks.yml
      loop: "{{ switch.tunnels | list }}"
      when: switch is defined and switch != ""

    - include_tasks: gre_tunnel_tasks.yml
      loop: "{{ host.tunnels | list }}"
      when: host is defined and host != ""
