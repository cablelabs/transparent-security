# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Set node facts
  set_fact:
    north_node: "{{ item.north_node | default(None) }}"
    south_node: "{{ item.south_node | default(None) }}"
    south_facing_port: "{{ item.south_facing_port | default(None) }}"
    north_facing_port: "{{ item.north_facing_port | default(None) }}"
    host: "{{ topo_dict.hosts.get(item.south_node) }}"
    south_facing_ip: "{{ item.south_facing_ip | default(None) }}"
    south_switch: "{{ topo_dict.switches.get(item.south_node) }}"
    north_switch: "{{ topo_dict.switches.get(item.north_node) }}"
    intf_name: None

- name: Find north node if south didn't exist
  set_fact:
    host: "{{ topo_dict.hosts.get(item.north_node) }}"
  when: not host

- name: Determine interface name for south_facing_port
  set_fact:
    intf_name: "{{ north_node | default('') }}-eth{{ south_facing_port | default('') }}"
  when: south_facing_port and not north_facing_port

- name: Determine interface name for south_facing_port
  set_fact:
    intf_name: "{{ south_node | default('') }}-eth{{ north_facing_port | default('') }}"
  when: north_facing_port and not south_facing_port

- name: Determine interface name for gateway north-facing port
  set_fact:
    intf_name: "{{ south_node | default('') }}-eth{{ north_facing_port | default('') }}"
  when: north_facing_port and south_facing_port and south_switch

- name: Set public IP on the gateway
  block:
    - name: Set public IP for intf {{ intf_name }}
      become: yes
      command: "ip addr add {{ south_switch.public_ip }}/24 dev {{ intf_name }}"
  when: south_switch.public_ip is defined and north_switch

- name: Setup local IPs on the gateway
  block:
    - name: Set local IP for intf {{ intf_name }}
      become: yes
      command: "ip addr add {{ south_facing_ip }}/30 dev {{ intf_name }}"
  when: host and north_switch.public_ip is defined

- name: Setup local IP on the core
  block:
    - name: Set local IP for core intf {{ intf_name }}
      become: yes
      command: "ip addr add {{ south_switch.public_ip }}/24 dev {{ intf_name }}"
  when: host and south_switch.public_ip is defined

- name: Install ifmetric
  become: yes
  apt:
    update_cache: yes
    name:
      - ifmetric
  register: apt_rc
  retries: 3
  delay: 10
  until: apt_rc is not failed

- name: Set route priority
  become: yes
  command: "ifmetric {{ intf_name }} 50"
  register: cmd_out
  changed_when: cmd_out is not failed
  retries: 3
  delay: 5

- name: Set route priority for core-inet link
  become: yes
  command: "ifmetric {{ intf_name }} 25"
  register: cmd_out
  changed_when: cmd_out is not failed
  retries: 3
  delay: 5
  when: host and south_switch.public_ip is defined
