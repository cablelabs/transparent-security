#!/usr/bin/env python2

# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- import_playbook: compile_p4.yml
  vars:
    p4_progs:
      - core
      - aggregate
      - gateway

- hosts: all
  become: yes

  gather_facts: no

  vars:
    wait_port: "{{ port_to_wait | default('') }}"
    timeout: "{{ wait_timeout | default(60) }}"

  tasks:
    - name: Ensure {{ srvc_log_dir }} directory has been created
      file:
        path: "{{ srvc_log_dir }}"
        state: directory

    - name: Ensure {{ remote_scripts_dir }} directory has been created
      file:
        path: "{{ remote_scripts_dir }}"
        state: directory

    - name: Ensure {{ remote_scripts_dir }}/conf directory has been created
      file:
        path: "{{ remote_scripts_dir }}/conf"
        state: directory

    - name: Create {{ service_name }} Service script
      template:
        src: ./templates/devices.yaml.j2
        dest: "{{ remote_scripts_dir }}/conf/device_daemon.yaml"

    - name: Create {{ service_name }} Service script
      template:
        src: "{{ local_srvc_script_tmplt_file }}"
        dest: "{{ remote_scripts_dir }}/{{ service_name }}.sh"
      vars:
        devices_conf_file: "{{ remote_scripts_dir }}/conf/device_daemon.yaml"

    - name: Cleanup mininet before startup script
      command: "mn -c"

    - name: Run the mininet startup script
      command: "sh {{ remote_scripts_dir }}/{{ service_name }}.sh"

    - name: Wait for {{ service_name }} to open port {{ wait_port }}
      wait_for:
        port: "{{ wait_port }}"
        timeout: "{{ timeout }}"
      when: wait_port != ''
