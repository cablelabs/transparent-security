# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# integration test case where one host creates a packet sniffer and another
# sends packets. The validation routine counts the number received via the
# receiver's log file
---
# Create packet sniffer
- hosts: "{{ 'localhost' if not rec_host or rec_host|length == 0 else rec_host }}"
  gather_facts: no
  vars:
    receive_timeout: "{{ receiver_timeout_seconds | default(60) }}"
    hops: "{{ int_hops | default(0) }}"
    ip_ver: "{{ ip_version | default('4') }}"
    receiver_log_file: "{{ host_log_dir }}/{{ receiver_log_filename }}"
  tasks:
    - debug:
        msg: "Expected INT hops to receive {{ hops }}"

    - name: Create receiver log directory {{ host_log_dir }}
      file:
        path: "{{ host_log_dir }}"
        state: directory
        mode: 0777

    - name: Delete {{ receiver_log_file }}
      file:
        path: "{{ receiver_log_file }}"
        state: absent

    - name: Create receiver log file {{ receiver_log_file }}
      file:
        path: "{{ receiver_log_file }}"
        state: touch
        mode: 0777

    - name: Create receive packets command
      set_fact:
        receive_cmd: >
          sudo /usr/bin/python {{ remote_tps_dir }}/trans_sec/device_software/receive_packets.py
          -i {{ receiver_intf }} -f {{ receiver_log_file }} -d {{ receive_timeout }} -ih {{ hops }} -v {{ ip_ver }}

    - debug:
        var: receive_cmd

    - name: >
        Receive and log packets from "{{ receiver.name }}" logged at {{ receiver_log_file }}
        with async timeout {{ receive_timeout }} for potentially {{ send_packet_count }} packets
      command: "{{ receive_cmd }}"
      register: cmd_out
      changed_when: cmd_out is not failed
      async: "{{ receive_timeout }}"
      poll: 0

# Generate packets from the sender
- hosts: "{{ 'localhost' if not send_host or send_host|length == 0 else send_host }}"
  gather_facts: no
  vars:
    send_packet_count: "{{ send_packet_count | default(1) }}"
    send_msg: "{{ the_message | default('hello transparent-security') }}"
    send_delay: "{{ send_packets_delay | default(0) }}"
    interval: "{{ send_interval | default(0.005) }}"
    loops: "{{ send_loops | default(1) }}"
    loop_delay: "{{ send_loop_delay | default(0) }}"
    hops: "{{ int_hops | default(0) }}"
    sender_log_file: "{{ host_log_dir }}/{{ sender_log_filename }}"
    protocol: "{{ send_protocol | default('UDP') }}"
    int_hdr_df: "{{ host_log_dir }}/send_int_data-ip-{{ ip_ver }}-proto-{{ protocol }}-ih-{{ hops }}.yml"
    ip_ver: "{{ ip_version | default('4') }}"
    sender_ip: "{{ sender.ip if ip_ver == '4' else sender.ipv6 }}"
    receiver_ip: "{{ receiver.ip if ip_ver == '4' else receiver.ipv6 }}"
    int_hdr_tmplt: ../templates/send_int_hdr.yml.j2
  tasks:
    - name: Create sender log directory {{ host_log_dir }}
      file:
        path: "{{ host_log_dir }}"
        state: directory
        mode: 0777

    - name: Create sender log file {{ sender_log_file }}
      file:
        path: "{{ sender_log_file }}"
        state: touch
        mode: 0777

    - name: Create send command
      set_fact:
        send_cmd: >-
          sudo /usr/bin/python {{ remote_tps_dir }}/trans_sec/device_software/send_packets.py
          -y {{ send_delay }} -i {{ interval }} -it {{ loops }} -itd {{ loop_delay }}
          -z {{ sender_intf }} -sa {{ sender_ip }} -r {{ receiver_ip }} -sp {{ send_src_port }}
          -p {{ send_port }} -f {{ sender_log_file }} -c {{ send_packet_count }} -e {{ sender.mac }}
          -s {{ switch.mac }} -pr {{ send_protocol }} -m '{{ send_msg }}'

    - debug:
        var: inspection_data

    - name: Configure for Sending INT Packets
      block:
      - name: Create INT config file to {{ int_hdr_df }} for send_packets.py
        template:
          src: "{{ int_hdr_tmplt }}"
          dest: "{{ int_hdr_df }}"

      - name: Create send command
        set_fact:
          send_cmd: "{{ send_cmd }} -ih {{ int_hdr_df }}"
      - debug:
          var: send_cmd
      when: inspection_data is defined and inspection_data|length != 0

    - name: Sending packets with command {{ send_cmd }}
      command: "{{ send_cmd }}"
      register: cmd_out
      changed_when: cmd_out is not failed
      async: 180

# Validate sent packets were received
- hosts: localhost
  gather_facts: no
  vars:
    min_packet_count: "{{ min_received_packet_count | default(send_packet_count) | int }}"
    max_packet_count: "{{ max_received_packet_count | default(send_packet_count) | int }}"
    hops: "{{ int_hops | default(0) }}"
    ip_ver: "{{ ip_version | default('4') }}"
    receiver_log_file: "{{ host_log_dir }}/{{ receiver_log_filename }}"
    sender_ip: "{{ sender.ip if ip_ver == '4' else sender.ipv6 }}"
    receiver_ip: "{{ receiver.ip if ip_ver == '4' else receiver.ipv6 }}"
  tasks:
    - name: Create log count command for non-INT packets
      set_fact:
        count_cmd: >
          grep {{ receiver_ip | ipaddr }} {{ receiver_log_file }}
          | grep 'WARNING'
          | grep {{ send_port }}
          | grep {{ send_src_port }}
          | wc -l
      when: hops|int == 0

    - name: Create log count command for INT packets
      set_fact:
        count_cmd: >
          grep {{ receiver_ip | ipaddr }} {{ receiver_log_file }}
          | grep 'WARNING'
          | grep 'INT Packet data'
          | grep {{ send_port }}
          | grep {{ send_src_port }}
          | wc -l
      when: hops|int > 0

    - name: Parse file with the count command [{{ count_cmd }}]
      shell: "set -e; {{ count_cmd }}"
      register: count_out
      changed_when: count_out is not failed

    - name: Retrieving the packet count
      set_fact:
        packet_count: "{{ count_out['stdout_lines'][0] | int }}"

    - name: Validate max [{{ max_packet_count }}] NOT < actual [{{ packet_count }}] OR min [{{ min_packet_count }}] NOT > actual [{{ packet_count }}]
      fail:
        msg: "{{ max_packet_count }} < {{ packet_count }} or {{ min_packet_count }} > {{ packet_count }}"
      when: min_packet_count|int > packet_count|int or max_packet_count|int < packet_count|int
