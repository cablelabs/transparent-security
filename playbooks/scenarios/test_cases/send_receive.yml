# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# integration test case where one host creates a packet sniffer and another
# sends packets. The validation routine counts the number received via the
# receiver's log file
---
# Create packet sniffer
- hosts: "{{ rec_host }}"
  gather_facts: no
  vars:
    receive_timeout: "{{ receiver_timeout_seconds | default(999999) }}"
    receiver_log_file: "{{ host_log_dir }}/{{ receiver_log_filename }}"
  tasks:
    - name: Remove {{ receiver_log_file }} from {{ receiver.name }}
      file:
        path: "{{ receiver_log_file }}"
        state: absent

    - name: Create receiver log directory {{ host_log_dir }}
      file:
        path: "{{ host_log_dir }}"
        state: directory
        mode: 0777

    - name: Create receiver log file {{ receiver_log_file }}
      file:
        path: "{{ receiver_log_file }}"
        state: touch
        mode: 0777

    - set_fact:
        receive_cmd: "sudo /usr/bin/python {{ remote_tps_dir }}/trans_sec/device_software/receive_packets.py -i {{ receiver.name }}-eth0 -f {{ receiver_log_file }}"

    - debug:
        var: receive_cmd

    - name: Receive and log packets from "{{ receiver.name }}" logged at {{ receiver_log_file }} with async timeout {{ receive_timeout }} for potentially {{ send_packet_count }} packets
      shell: "{{ receive_cmd }}"
      async: "{{ receive_timeout }}"
      poll: 0

# Generate packets from the sender
- hosts: "{{ send_host }}"
  gather_facts: no
  vars:
    send_packet_count: "{{ send_packet_count | default(1) }}"
    send_msg: "{{ the_message | default('hello transparent-security') }}"
    send_delay: "{{ send_packets_delay | default(1) }}"
    interval: "{{ send_interval | default(0.005) }}"
    loops: "{{ send_loops | default(1) }}"
    loop_delay: "{{ send_loop_delay | default(1) }}"
    sender_log_file: "{{ host_log_dir }}/{{ sender_log_filename }}"
  tasks:
    - name: Create sender log directory {{ host_log_dir }}
      file:
        path: "{{ host_log_dir }}"
        state: directory
        mode: 0777

    - name: Create sender log file {{ sender_log_file }}
      file:
        path: "{{ sender_log_file }}"
        state: touch
        mode: 0777

    - set_fact:
        send_cmd: "sudo /usr/bin/python {{ remote_tps_dir }}/trans_sec/device_software/send_packets.py -y {{ send_delay }} -i {{ interval }} -it {{ loops }} -itd {{ loop_delay }} -z {{ sender_intf }} -r {{ receiver.ip }} -sp {{ send_src_port }} -p {{ send_port }} -f {{ sender_log_file }} -c {{ send_packet_count }} -s {{ switch.mac }} -m '{{ send_msg }}'"

    - name: Sending packets with command [{{ send_cmd }}]
      shell: "{{ send_cmd }}"
      async: 180

# Validate sent packets were received
- hosts: localhost
  gather_facts: no
  vars:
    min_packet_count: "{{ min_received_packet_count | default(send_packet_count) | int }}"
    max_packet_count: "{{ max_received_packet_count | default(send_packet_count) | int }}"
    receiver_log_file: "{{ host_log_dir }}/{{ receiver_log_filename }}"
  tasks:
    - set_fact:
        grep_cmd: "grep {{ receiver.ip }} {{ receiver_log_file }} | grep {{ send_port }} | wc -l"

    - name: Parse file with command [{{ grep_cmd }}]
      shell: "{{ grep_cmd }}"
      register: grep_out

    - set_fact:
        packet_count: "{{ grep_out['stdout_lines'][0] | int }}"

    - name: Validate max [{{ max_packet_count }}] NOT < actual [{{ packet_count }}] OR min [{{ min_packet_count }}] NOT > actual [{{ packet_count }}]
      fail:
        msg: "{{ max_packet_count }} < {{ packet_count }} or {{ min_packet_count }} > {{ packet_count }}"
      when: min_packet_count|int > packet_count|int or max_packet_count|int < packet_count|int
